1.元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。
临时数据使用“元组”，复杂的数据结构使用结构体。

2.选类型（optionals）来处理值可能缺失的情况。表示两种情况：
  1). 有值， 你可以解析可选类型访问这个值。
  2). 根本没有值。

***
swift中的可选类型相比oc的好处是什么？
 Oc没有可选类型这个概念。

 对于对象：一个方法返回一个对象不返回nil，
 “nil”在oc中标识缺少一个合法的对象。
 “nil”基本的 C 类型或者枚举类型不起作用。对于这些类型会返回一个特殊类型比如 NSNotFound）来暗示值缺失。在oc中程序员需要进行特殊判断，
然而，Swift 的可选类型可以让你暗示任意类型的值缺失，并不需要一个特殊值。

 Int? 问号暗示包含的值是可选类型,也就是说可能包含 Int 值也可能不包含值。不能包含其他任何值比如 Bool 值或者 String 值。只能是 Int 或者什么都没有。）

nil 不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。
如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为 nil：

var surveyAnswer: String?
// surveyAnswer 被自动设置为 nil

3.Swift中的nil和oc中的nil一样吗？
不一样，
Oc 中的nil：是一个指向不存在对象的指针
Swift中的nil：不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为 nil，不只是对象类型。

4.以使用 if 语句和 nil 比较来判断一个可选值是否包含值。
你可以使用“相等”(==)或“不等”(!=)来执行比较。
如果可选类型有值，它将不等于 nil：
例如：
if convertedNumber != nil {
    print("测试可选类型")
}

确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（!）来获取值。（!）:表示
我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）
if convertedNumber != nil {
    print("测试可选类型 \(convertedNumber!).")
}


使用 ! 来获取一个不存在的可选值会导致运行时错误。使用 ! 来强制解析值之前，一定要确定可选包含一个非 nil 的值。

5.可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。

